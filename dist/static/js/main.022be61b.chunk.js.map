{"version":3,"sources":["components/layout/NavbarSignedIn.js","components/layout/NavbarSignedOut.js","components/tabs/Home.js","components/tabs/About.js","components/tabs/Account.js","components/tabs/Assignments.js","components/tabs/BrainStorm.js","components/tabs/CurrentWork.js","components/tabs/ProjectDetails.js","components/tabs/Resources.js","components/tabs/TeamBuilder.js","components/auth/SignIn.js","components/auth/SignUp.js","config/firebaseKey.js","App.js","serviceWorker.js","index.js"],"names":["NavbarSignedIn","history","useHistory","Navbar","bg","variant","expand","Brand","href","className","Toggle","aria-controls","Collapse","id","Nav","Link","Button","onClick","firebase","signOut","push","SignedOutLinks","Home","Container","Row","Col","Card","class","Body","Text","target","About","style","borderRadius","padding","Title","Subtitle","Account","props","handleChange","event","setState","value","state","authState","firstName","lastName","email","password","nickname","birthday","gender","phone_number","website","github","preventDefault","Form","onSubmit","this","handleSubmit","type","placeholder","onChange","Control","React","Component","Assignments","_isMounted","updateState","userID","currentUser","uid","ref","once","snapshot","exists","roomNumber","val","then","allAssignments","handleInputChange","e","handleFormSubmit","uploadAssignment","enteredAssignment","text","updates","enteredMember","update","assignmentsList","Object","keys","length","map","key","Group","controlId","marginLeft","BrainStorm","previousChats","ideaList","handleEnterIdeaChange","idea","handleChatMessageChange","chatMessage","handleChatMessageSubmit","sendMessage","toString","handleIdeaFormSubmit","uploadIdea","remove","messagesList","ideasList","CurrentWork","teamMembersWork","teamMemberStatuses","allUsers","teamMembers","textInput","updates2","statusInput","memberWorkList","name","xs","ProjectDetails","obj","projectIdea","console","log","framework","backend","dataSource","handleTextInputChange","handleDropDownChange","eventKey","eventObj","categoryDropdown","ButtonGroup","Dropdown","onSelect","Menu","Item","Resources","TeamBuilder","users","usersObj","teammates","userName","currentUserID","userObj","forEach","enteredEmail","addUserToTeam","teammateID","roomNum","handleCreateProjectClick","createRoom","num","teammatesList","marginTop","marginBottom","SignIn","signInWithEmailAndPassword","catch","error","Label","createUserWithEmailAndPassword","user","child","set","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","onAuthChange","isAuthenticated","firebaseKey","onAuthStateChanged","exact","path","component","SignUp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.022be61b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Navbar, Nav, Button } from 'react-bootstrap';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as firebase from 'firebase';\r\n\r\nexport default function NavbarSignedIn (){\r\n  let history = useHistory();\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\r\n      <Navbar.Brand href=\"/\" className=\"ml-3 mr-4\" >HackOrganized</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n          <Nav.Link href=\"/\">Home</Nav.Link>\r\n          <Nav.Link href=\"/teambuilder\">TeamBuilder</Nav.Link>\r\n          <Nav.Link href=\"/brainstorm\">BrainStorm</Nav.Link>\r\n          <Nav.Link href=\"/projectdetails\">Project Details</Nav.Link>\r\n          <Nav.Link href=\"/assignments\">Assignments</Nav.Link>\r\n          <Nav.Link href=\"/currentwork\">Current Work</Nav.Link>\r\n          <Nav.Link href=\"/resources\">Resources</Nav.Link>\r\n        </Nav>\r\n        <Nav className=\"mr-sm-2\">\r\n          <Nav.Link href=\"/account\">Account</Nav.Link>\r\n          {/* Signout Button */}\r\n          <Button variant=\"secondary\" className=\"ml-2\" onClick={() => {\r\n            firebase.auth().signOut();\r\n            history.push('/');\r\n          }} >Logout</Button>{' '}\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  )\r\n}","import React from 'react';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\n\r\nexport default function SignedOutLinks() {\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\r\n      <Navbar.Brand href=\"/\" className=\"ml-3 mr-4\" >HackOrganized</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n      <Nav className=\"mr-auto\">\r\n        <Nav.Link href=\"/\">Home</Nav.Link>\r\n        <Nav.Link href=\"/resources\">Resources</Nav.Link>\r\n      </Nav>\r\n      <Nav className=\"mr-sm-2\">\r\n        <Nav.Link href=\"/about\">About</Nav.Link>\r\n        <Nav.Link href=\"/login\">Login</Nav.Link>\r\n        <Nav.Link href=\"/signup\">SignUp</Nav.Link>\r\n      </Nav>\r\n    </Navbar.Collapse>\r\n    </Navbar>\r\n  )\r\n}","import React from 'react';\r\nimport { Container, Row, Col, Card } from 'react-bootstrap';\r\n//import './style.css'; \r\n\r\nexport default function Home() {\r\n  return (\r\n    <Container>\r\n      <h1> Welcome to the Hackathon!</h1>\r\n      <Row>\r\n        <Col>\r\n          <Card class=\"card\" >\r\n            <Card.Body>\r\n              <h3>Things to Think About</h3>\r\n              <Card.Text class= \"text\">\r\n                Hackathons usually last around 24-48 hours, so you don't have much time to waste! Quickly\r\n                find a few teammates and decide on what project you want to create.\r\n              </Card.Text>\r\n              <Card.Text class= \"text\" >\r\n                Alongside endless project ideas, there are endless services and frameworks that you can use to \r\n                build your project. Make sure you and your teammates form a cohesive skill set for building your \r\n                project\r\n              </Card.Text>\r\n              <Card.Text class= \"text\" >\r\n                Spend effort thinking about your project demo and presentation quality. Your project may be \r\n                amazing, but it will only seem as good as its demo to the judges.\r\n              </Card.Text>\r\n              <Card.Text class= \"text\" >\r\n                If you are stuck, ask someone around you for help, there are often mentors and other programmers \r\n                who would be willing to help you out if you ask nicely! And if you feel like learning something \r\n                new, consider attending a workshop\r\n              </Card.Text>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        <Col>\r\n          <Card class=\"card\">\r\n            <Card.Body>\r\n              <h3>Reminders</h3>\r\n              <Card.Text class= \"text\" >\r\n                Check out the homepage of your hackathons for information on challenges, workshops, prizes, and\r\n                where you can ask for help if you need it. Pay close attention to the schedule of the event, to \r\n                make sure you don't miss important side events or deadlines.\r\n              </Card.Text>\r\n              <Card.Text class= \"text\"  >\r\n                Take breaks! No one can program and build for 24 hours straight, make sure you are taking breaks, \r\n                talking to your teammates, and taking care of yourself. Get some food, take a nap, and freshen up, \r\n                so you have energy to help your teammates.\r\n              </Card.Text>\r\n              <Card.Text class= \"text\" >\r\n                Hackathons often use Slack, Discord, or another messaging service to communicate and make \r\n                announcements, be sure at least some of your team members are on those channels!\r\n              </Card.Text>\r\n              <Card.Link  href=\"https://slack.com/\" target=\"_blank\" >Slack</Card.Link>\r\n              <Card.Link  href=\"https://discord.com/new\" target=\"_blank\" >Discord</Card.Link>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { Container, Card } from 'react-bootstrap';\r\nimport './style.css'; \r\n\r\n\r\nexport default function About() {\r\n  return (\r\n    <Container>\r\n      <h1 >About this Web App</h1>\r\n      <Card class=\"card\" style={{ borderRadius: 20, padding: 40 }} >\r\n      <Card.Body class=\"body\">\r\n        <Card.Title class=\"title\">HackOrganized Web Application</Card.Title>\r\n        <Card.Subtitle className=\"mb-2 text-muted\">Created by Syed Rizvi and Melika Nassizadeh</Card.Subtitle>\r\n        <Card.Text class=\"text\">\r\n          This web application was created at Hacky Birthday MLH 2020, with the intention of making it easier for hackathon \r\n          groups, and especially beginners, to organize their project. Given that many events are moving fully online now, \r\n          there is a great need for hackathon teams to work together efficiently without having the speed of communication \r\n          that normally comes with being in the same room together. With this is mind, this web application gives team members \r\n          a convenient space to assign tasks, brainstorm ideas, and see what other members are working on. This cuts down on \r\n          on unnecessary conversation and complicated online messaging in group chats, as much of the project information and \r\n          status of members will be easily viewable on the website, keeping members up to speed with the group.\r\n        </Card.Text>\r\n        <Card.Link href=\"https://github.com/SyedA5688/HackOrganized\" target=\"_blank\" >GitHub Repository</Card.Link>\r\n      </Card.Body>\r\n      </Card>\r\n    </Container>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { Container, Card, Form, Button } from 'react-bootstrap';\r\n\r\nexport default class Account extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      authState: 'signedIn',\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      nickname: \"\",\r\n      birthday: \"\",\r\n      gender: \"\",\r\n      phone_number: \"\",\r\n      website: \"\",\r\n      github:\"\",\r\n    };\r\n    \r\n  }\r\n\r\n  handleChange= (event) =>{\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n    <Container>\r\n      \r\n      <h1>Your Account</h1>\r\n      <Card class=\"card\">\r\n\r\n      </Card>\r\n      <Card class=\"card\">\r\n      <Form class=\"text\" onSubmit={this.handleSubmit}>\r\n        <input type=\"text\" id=\"assignment\" placeholder=\"Description/About You\" onChange={this.handleChange} />         \r\n        <Button variant=\"light\" value=\"Submit\" id=\"submit\" type=\"Update\">Update </Button>    \r\n      </Form>\r\n      </Card>\r\n    \r\n      <Card class=\"card\">\r\n      <Form class=\"text\" onSubmit={this.handleSubmit}>\r\n        <Form.Control type=\"text\" id=\"assignment\" placeholder=\"Description/About You\" onChange={this.handleChange} />         \r\n        <Button variant=\"light\" value=\"Submit\" id=\"submit\" type=\"Update\">Update </Button>    \r\n      </Form>\r\n      </Card>\r\n      \r\n    </Container>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Container, Card, Form, Button } from 'react-bootstrap';\r\nimport * as firebase from 'firebase';\r\n\r\n\r\nexport default class Assignments extends React.Component\r\n{\r\n  _isMounted = false;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      enteredAssignment: \"\",\r\n      enteredMember: \"\",\r\n      allAssignments: {},\r\n      roomNumber: -1,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n    if (firebase.auth().currentUser != null) {\r\n      this.updateState();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n\r\n  updateState = () => {\r\n    let userID = firebase.auth().currentUser.uid;\r\n    firebase.database().ref(\"users/\" + userID + \"/roomNumber\").once('value', (snapshot) => {\r\n      if (snapshot.exists() && this._isMounted) {\r\n        this.setState({ roomNumber: snapshot.val() });\r\n      }\r\n    }).then(() => {\r\n      if (this.state.roomNumber !== -1) {\r\n        firebase.database().ref(\"rooms/\" + this.state.roomNumber + \"/assignments\").once('value', (snapshot) => {\r\n          if (snapshot.exists() && this._isMounted) {\r\n            this.setState({ allAssignments: snapshot.val() });\r\n          }\r\n        });\r\n      }\r\n    })\r\n  }\r\n\r\n  handleInputChange = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  }\r\n\r\n  handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.uploadAssignment(this.state.enteredAssignment);\r\n    this.setState({\r\n      enteredAssignment: ''\r\n    });\r\n    this.updateState();\r\n  }\r\n\r\n  uploadAssignment = (text) => {\r\n    let updates = {};\r\n    updates[this.state.enteredMember] = text;\r\n    firebase.database().ref(\"rooms/\" + this.state.roomNumber + \"/assignments\").update(updates);\r\n  }\r\n\r\n  render() {\r\n    const assignmentsList = (Object.keys(this.state.allAssignments).length > 0) ? (\r\n      <div>\r\n        {Object.keys(this.state.allAssignments).map(key => { \r\n          return (\r\n            <Card class=\"card\">\r\n              <Card.Text>{this.state.allAssignments[key]}</Card.Text>\r\n              <Card.Text>Tasked to: {key}</Card.Text>\r\n            </Card>\r\n          )\r\n        })}\r\n      </div>\r\n    ) : (<div></div>);\r\n\r\n    return (\r\n    <Container>\r\n      <h1>Task Assignment Page</h1>\r\n      {assignmentsList}\r\n\r\n      <Card class=\"card\">\r\n      <Form class=\"text\" onSubmit={this.handleFormSubmit}>\r\n        <Form.Group controlId=\"assignmentInput\">\r\n          <Form.Control \r\n            type=\"text\" \r\n            id=\"enteredAssignment\" \r\n            placeholder=\"Enter text\" \r\n            value={this.state.enteredAssignment}\r\n            onChange={this.handleInputChange} \r\n          />\r\n        </Form.Group>\r\n        <Form.Group controlId=\"textInput\">\r\n          <h4>Assign To:</h4>\r\n          <Form.Control \r\n            type=\"text\" \r\n            id=\"enteredMember\" \r\n            placeholder=\"Enter text\" \r\n            value={this.state.enteredMember}\r\n            onChange={this.handleInputChange} \r\n          />\r\n        </Form.Group>          \r\n        \r\n        <Button style={{ marginLeft: \"150px\"}} variant=\"light\" value=\"Submit\" id=\"submit\" type=\"submit\">Submit </Button>    \r\n      </Form>\r\n      </Card>\r\n      \r\n    </Container>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Container, Card, Row, Col, Form, Button } from 'react-bootstrap';\r\nimport * as firebase from 'firebase';\r\n\r\nexport default class BrainStorm extends React.Component  \r\n{\r\n  _isMounted = false;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      idea: \"\",\r\n      chatMessage: \"\",\r\n      previousChats: {},\r\n      ideaList: {},\r\n      roomNumber: -1,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n    if (firebase.auth().currentUser != null) {\r\n      this.updateState();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n    firebase.database().ref(\"rooms/\" + this.state.roomNumber + \"/chats\").remove();\r\n  }\r\n\r\n  updateState = () => {\r\n    let userID = firebase.auth().currentUser.uid;\r\n    firebase.database().ref(\"users/\" + userID + \"/roomNumber\").once('value', (snapshot) => {\r\n      if (snapshot.exists() && this._isMounted) {\r\n        this.setState({ roomNumber: snapshot.val() });\r\n      }\r\n    }).then(() => {\r\n      if (this.state.roomNumber !== -1) {\r\n        firebase.database().ref(\"rooms/\" + this.state.roomNumber + \"/chats\").once('value', (snapshot) => {\r\n          if (snapshot.exists() && this._isMounted) {\r\n            this.setState({ previousChats: snapshot.val() });\r\n          }\r\n        });\r\n        firebase.database().ref(\"rooms/\" + this.state.roomNumber + \"/projectIdeas\").once('value', (snapshot) => {\r\n          if (snapshot.exists() && this._isMounted) {\r\n            this.setState({ ideaList: snapshot.val() });\r\n          }\r\n        });\r\n      }\r\n    })\r\n  }\r\n\r\n  handleEnterIdeaChange = (e) => { \r\n    this.setState({\r\n      idea: e.target.value\r\n    });\r\n  }\r\n\r\n  handleChatMessageChange = (e) => {\r\n    this.setState({\r\n      chatMessage: e.target.value\r\n    });\r\n  }\r\n\r\n  handleChatMessageSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.sendMessage(this.state.chatMessage);\r\n    this.setState({\r\n      chatMessage: ''\r\n    });\r\n    this.updateState();\r\n  }\r\n\r\n  sendMessage = (text) => {\r\n    let updates = {};\r\n    let num = Object.keys(this.state.previousChats).length + 1;\r\n    updates[\"chat\" + num.toString()] = text;\r\n    firebase.database().ref(\"rooms/\" + this.state.roomNumber + \"/chats\").update(updates);\r\n  }\r\n\r\n  handleIdeaFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.uploadIdea(this.state.idea);\r\n    this.setState({\r\n      idea: ''\r\n    });\r\n    this.updateState();\r\n  }\r\n\r\n  uploadIdea = (text) => {\r\n    let updates = {};\r\n    let num = Object.keys(this.state.ideaList).length + 1;\r\n    updates[\"idea\" + num.toString()] = text;\r\n    firebase.database().ref(\"rooms/\" + this.state.roomNumber + \"/projectIdeas\").update(updates);\r\n  }\r\n\r\n  render (){\r\n    const messagesList = (Object.keys(this.state.previousChats).length > 0) ? (\r\n      <div>\r\n        {Object.keys(this.state.previousChats).map(key => { \r\n          return <Card.Text class=\"text\" >{this.state.previousChats[key]}</Card.Text>\r\n        })}\r\n      </div>\r\n    ) : (<div></div>);\r\n\r\n    const ideasList = (Object.keys(this.state.ideaList).length > 0) ? (\r\n      <div>\r\n        {Object.keys(this.state.ideaList).map(key => { \r\n          return <Card.Text class=\"text\" >{this.state.ideaList[key]}</Card.Text>\r\n        })}\r\n      </div>\r\n    ) : (<div></div>);\r\n\r\n    return (\r\n    <Container>\r\n      <h1>Brainstorm Page</h1>\r\n      <Row>\r\n        <Col>\r\n          <Card class=\"card\" > \r\n            <Card.Body>\r\n            <h3>Awesome Project Ideas</h3>\r\n            <h4> </h4>\r\n              <Card.Text class=\"text\">\r\n                Make a web app!\r\n              </Card.Text>\r\n              {ideasList}\r\n              <Form onSubmit={this.handleIdeaFormSubmit} >\r\n                  <Form.Control\r\n                    type=\"text\" \r\n                    id=\"ideas\" \r\n                    placeholder=\"Add more ideas\" \r\n                    onChange={this.handleEnterIdeaChange}\r\n                    value={this.state.idea}\r\n                  />\r\n                  <h3> </h3>\r\n                  <Button variant=\"light\" type=\"submit\">Post </Button>\r\n                </Form>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        <Col>\r\n          <Card class=\"card\">\r\n            <Card.Body>\r\n              <h3>Chat Box</h3>\r\n              <h4> </h4>\r\n              {messagesList}\r\n              <Form onSubmit={this.handleChatMessageSubmit} >\r\n                <Form.Control\r\n                  type=\"text\" \r\n                  id=\"enteredMessage\" \r\n                  placeholder=\"Send a Message\" \r\n                  onChange={this.handleChatMessageChange} \r\n                  value={this.state.chatMessage}\r\n                />\r\n                <h3> </h3>\r\n                <Button variant=\"light\" type=\"submit\">Send </Button>\r\n              </Form>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n    )\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\nimport { Container, Row, Col, Card, Form, Button } from 'react-bootstrap';\r\nimport * as firebase from 'firebase';\r\n\r\nexport default class CurrentWork extends React.Component\r\n{\r\n  _isMounted = false;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      teamMembersWork:{},\r\n      textInput: \"\",\r\n      teamMemberStatuses: \"\",\r\n      statusInput: \"\",\r\n      roomNumber: -1,\r\n      allUsers: {},\r\n      teamMembers: {},\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n    if (firebase.auth().currentUser != null) {\r\n      this.updateState();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n\r\n  updateState = () => {\r\n    let userID = firebase.auth().currentUser.uid;\r\n    firebase.database().ref(\"users/\" + userID + \"/roomNumber\").once('value', (snapshot) => {\r\n      if (snapshot.exists() && this._isMounted) {\r\n        this.setState({ roomNumber: snapshot.val() });\r\n      }\r\n    }).then(() => {\r\n      if (this.state.roomNumber !== -1) {\r\n        firebase.database().ref(\"rooms/\" + this.state.roomNumber + \"/currentWork\").once('value', (snapshot) => {\r\n          if (snapshot.exists() && this._isMounted) {\r\n            this.setState({ teamMembersWork: snapshot.val() })\r\n          }\r\n        });\r\n        firebase.database().ref(\"rooms/\" + this.state.roomNumber + \"/statuses\").once('value', (snapshot) => {\r\n          if (snapshot.exists() && this._isMounted) {\r\n            this.setState({ teamMemberStatuses: snapshot.val() })\r\n          }\r\n        });\r\n        firebase.database().ref(\"users\").once('value', (snapshot) => {\r\n          if (snapshot.exists() && this._isMounted) {\r\n            this.setState({ allUsers: snapshot.val() });\r\n          }\r\n        });\r\n        firebase.database().ref(\"users/\" + userID + \"/teammates\").once('value', (snapshot) => {\r\n          if (snapshot.exists() && this._isMounted) {\r\n            this.setState({ teamMembers: snapshot.val() })\r\n          }\r\n        });\r\n      }\r\n    })\r\n  }\r\n\r\n  handleInputChange = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  }\r\n\r\n  handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.textInput === \"\" || this.state.roomNumber === -1) {\r\n      return;\r\n    }\r\n    // Update Status in Firebase\r\n    let uid = firebase.auth().currentUser.uid;\r\n    let updates = {};\r\n    let updates2 = {};\r\n    updates[uid] = this.state.textInput;\r\n    updates2[uid] = this.state.statusInput;\r\n    firebase.database().ref(\"rooms/\" + this.state.roomNumber + \"/currentWork\").update(updates)\r\n    firebase.database().ref(\"rooms/\" + this.state.roomNumber + \"/statuses\").update(updates2);\r\n    // Update state\r\n    this.updateState();\r\n    this.setState({ textInput: \"\", statusInput: \"\" });\r\n  }\r\n\r\n  render(){\r\n    const memberWorkList = (Object.keys(this.state.teamMembersWork).length > 0 && \r\n                            Object.keys(this.state.allUsers).length > 0) ? (\r\n      <div>\r\n        {Object.keys(this.state.teamMembersWork).map(key => { \r\n          return (\r\n            <Card class=\"card\">\r\n              <Card.Body>\r\n                <Card.Title class=\"title\">{this.state.allUsers[key].name}, Status: {this.state.teamMemberStatuses[key]}</Card.Title>\r\n                <Card.Text class=\"text\">\r\n                  {this.state.teamMembersWork[key]}\r\n                </Card.Text>\r\n              </Card.Body>\r\n            </Card>\r\n          )\r\n        })}\r\n      </div>\r\n    ) : (<div></div>);\r\n\r\n    return (\r\n      <Container>\r\n        <h1>What Everyone is Working on Currently:</h1>\r\n        {memberWorkList}\r\n\r\n        <Row>\r\n          <Col></Col>\r\n          <Col xs={6}>\r\n            <Card>\r\n              <Form onSubmit={this.handleFormSubmit} >\r\n                <Form.Group controlId=\"textInput\">\r\n                  <h4>Update Your Current Work and Status</h4>\r\n                  <Form.Control \r\n                    type=\"text\" \r\n                    id=\"textInput\" \r\n                    placeholder=\"Enter text\" \r\n                    value={this.state.textInput}\r\n                    onChange={this.handleInputChange} \r\n                  />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"statusInput\">\r\n                  <Form.Control \r\n                    type=\"text\" \r\n                    id=\"statusInput\" \r\n                    placeholder=\"Enter status\" \r\n                    value={this.state.statusInput}\r\n                    onChange={this.handleInputChange} \r\n                  />\r\n                </Form.Group>\r\n                  <Button \r\n                    variant=\"primary\" \r\n                    type=\"submit\" \r\n                    className=\"ml-5\" >\r\n                    Submit\r\n                  </Button>\r\n              </Form>\r\n            </Card>\r\n          </Col>\r\n          <Col></Col>\r\n        </Row>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\nimport { Container, Row, Col, Card, Form, Button, Dropdown, ButtonGroup } from 'react-bootstrap';\r\nimport * as firebase from 'firebase';\r\n\r\n\r\nexport default class ProjectDetails extends React.Component \r\n{\r\n  _isMounted = false;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      projectIdea: \"\",\r\n      framework: \"\",\r\n      backend: \"\",\r\n      dataSource: \"\",\r\n      textInput: \"\",\r\n      categoryDropdown: \"Category\",\r\n      roomNumber: -1,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n    if (firebase.auth().currentUser != null) {\r\n      this.updateState();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n\r\n  updateState = () => {\r\n    let userID = firebase.auth().currentUser.uid;\r\n    firebase.database().ref(\"users/\" + userID + \"/roomNumber\").once('value', (snapshot) => {\r\n      if (snapshot.exists() && this._isMounted) {\r\n        this.setState({ roomNumber: snapshot.val() });\r\n      }\r\n    }).then(() => {\r\n      if (this.state.roomNumber !== -1) {\r\n        firebase.database().ref(\"rooms/\" + this.state.roomNumber + \"/projectDetails\").once('value', (snapshot) => {\r\n          if (snapshot.exists() && this._isMounted) {\r\n            let obj = snapshot.val();\r\n            if (obj[\"ProjectIdea\"] !== null) { this.setState({ projectIdea: obj[\"ProjectIdea\"] }); console.log(obj[\"ProjectIdea\"]) }\r\n            if (obj[\"Framework\"] !== null) { this.setState({ framework: obj[\"Framework\"] }); }\r\n            if (obj[\"Backend\"] !== null) { this.setState({ backend: obj[\"Backend\"] }); }\r\n            if (obj[\"DataSource\"] !== null) { this.setState({ dataSource: obj[\"DataSource\"] }); }\r\n          }\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  handleTextInputChange = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  }\r\n\r\n  handleDropDownChange = (eventKey, eventObj) => {\r\n    this.setState({\r\n      categoryDropdown: eventKey\r\n    })\r\n  }\r\n\r\n  handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.categoryDropdown === \"Category\" || this.state.roomNumber === -1) {\r\n      return;\r\n    }\r\n    // Update in Firebase\r\n    let updates = {};\r\n    if (this.state.categoryDropdown === \"ProjectIdea\") { updates[\"ProjectIdea\"] = this.state.textInput }\r\n    else if (this.state.categoryDropdown === \"Framework\") { updates[\"Framework\"] = this.state.textInput }\r\n    else if (this.state.categoryDropdown === \"Backend\") { updates[\"Backend\"] = this.state.textInput }\r\n    else if (this.state.categoryDropdown === \"DataSource\") { updates[\"DataSource\"] = this.state.textInput }\r\n\r\n    firebase.database().ref(\"rooms/\" + this.state.roomNumber + \"/projectDetails\").update(updates);\r\n    // Update state\r\n    this.updateState();\r\n    this.setState({ textInput: \"\" });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <h1>Project Details</h1>\r\n        <Row>\r\n          <Col>\r\n            <Card>\r\n              <Card.Body class=\"body\">\r\n                <h4>What Are We Making:</h4>\r\n                <Card.Text>{this.state.projectIdea}</Card.Text>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          <Col>\r\n            <Card>\r\n              <Card.Body class=\"body\">\r\n                <h4>What Framework(s) Are We Using:</h4>\r\n                <Card.Text>{this.state.framework}</Card.Text>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col>\r\n            <Card>\r\n              <Card.Body class=\"body\">\r\n                <h4>What Will Be Our Backend:</h4>\r\n                <Card.Text>{this.state.backend}</Card.Text>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          <Col>\r\n            <Card>\r\n              <Card.Body class=\"body\">\r\n                <h4>Where Are We Getting Data From:</h4>\r\n                <Card.Text>{this.state.dataSource}</Card.Text>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col></Col>\r\n          <Col xs={6}>\r\n            <Card>\r\n              <Form onSubmit={this.handleFormSubmit} >\r\n                <Form.Group controlId=\"textInput\">\r\n                  <h4>Update Details</h4>\r\n                  <Form.Control type=\"text\" id=\"textInput\" placeholder=\"Enter text\" value={this.state.textInput} onChange={this.handleTextInputChange} />\r\n                </Form.Group>\r\n\r\n                <ButtonGroup >\r\n                  <Dropdown onSelect={(key, event) => { this.handleDropDownChange(key, event) }} >\r\n                    <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                      { this.state.categoryDropdown }\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                      <Dropdown.Item eventKey=\"ProjectIdea\">Project Idea</Dropdown.Item>\r\n                      <Dropdown.Item eventKey=\"Framework\">Framework</Dropdown.Item>\r\n                      <Dropdown.Item eventKey=\"Backend\">Backend</Dropdown.Item>\r\n                      <Dropdown.Item eventKey=\"DataSource\">Data Source</Dropdown.Item>\r\n                    </Dropdown.Menu>\r\n                  </Dropdown>\r\n\r\n                  <Button variant=\"primary\" type=\"submit\" className=\"ml-5\" >\r\n                    Submit\r\n                  </Button>\r\n                </ButtonGroup>\r\n              </Form>\r\n            </Card>\r\n          </Col>\r\n          <Col></Col>\r\n        </Row>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Container, Card } from 'react-bootstrap';\r\nimport './style.css'; \r\n\r\nexport default function Resources() {\r\n  return (\r\n    <Container>\r\n      <h1>Useful Resources for Hackers</h1>\r\n      <Card class=\"card\">\r\n        <Card.Body>\r\n          <Card.Title class=\"title\">GitHub</Card.Title>\r\n          <Card.Text class=\"text\">\r\n            GitHub is an online repository database and version control system that helps you and \r\n            your group work on a project while not interfering with each others progress, and maintains \r\n            older versions of code in case your group needs to backtrack. GitHub is also used as a profile\r\n            for job applications, so it is definitely a good idea to make an account!\r\n          </Card.Text>\r\n          <Card.Link href=\"https://github.com/\" target=\"_blank\" >Check out GitHub</Card.Link>\r\n        </Card.Body>\r\n      </Card>\r\n      <Card class=\"card\" >\r\n        <Card.Body>\r\n          <Card.Title class=\"title\"> Google Cloud</Card.Title>\r\n          <Card.Text class=\"text\">\r\n            Google Cloud services provides many different services that you are able to use in your project,\r\n            everything from authentication to databases to app hosting. Since there are many services available,\r\n            your team needs to carefully decide which ones to use in your project.\r\n          </Card.Text>\r\n          <Card.Link href=\"https://cloud.google.com/\"  target=\"_blank\" >Check out Google Cloud Services</Card.Link>\r\n        </Card.Body>\r\n      </Card>\r\n      <Card class=\"card\" >\r\n        <Card.Body>\r\n          <Card.Title class=\"title\">DevPost</Card.Title>\r\n          <Card.Text class=\"text\">\r\n            DevPost is a hackathon and project database where hackathon groups post their final submissions, and\r\n            where you will likely need to submit your final project at the end of your hackathon. On DevPost you can\r\n            see projects from other groups for inspiration, and look for other hackathon events.\r\n          </Card.Text>\r\n          <Card.Link href=\"https://devpost.com/\"  target=\"_blank\" >Check out DevPost</Card.Link>\r\n        </Card.Body>\r\n      </Card>\r\n      <Card class=\"card\" >\r\n        <Card.Body>\r\n          <Card.Title class=\"title\"> APIs</Card.Title>\r\n          <Card.Text class=\"text\">\r\n            APIs are services that return something when you call them or make a request, anything from data to random \r\n            jokes. They allow your applications to incorporate real data, and can offer advanced services such as image\r\n            recognition and data analysis. Often you will need to sign up and get an API key to use these services\r\n          </Card.Text>\r\n          <Card.Link href=\"https://github.com/public-apis/public-apis\"  target=\"_blank\" >API List on GitHub</Card.Link>\r\n        </Card.Body>\r\n      </Card>\r\n      <Card class=\"card\" >\r\n        <Card.Body>\r\n          <Card.Title class=\"title\">PostMan</Card.Title>\r\n          <Card.Text class=\"text\">\r\n            PostMan is an API testing tool, where you can test API calls before putting them in your application. It \r\n            is an extremely versatile tool, and is especially useful for developing projects that need to gather data\r\n            from remote services.\r\n          </Card.Text>\r\n          <Card.Link href=\"https://devpost.com/\"  target=\"_blank\" >Check out PostMan</Card.Link>\r\n        </Card.Body >\r\n      </Card>\r\n      <Card class=\"card\" >\r\n        <Card.Body>\r\n          <Card.Title class=\"title\">Microsoft Azure</Card.Title>\r\n          <Card.Text class=\"text\">\r\n            Like Google Cloud Services, Microsoft Azure also offers a wide range of services that you can incorporate into\r\n            your app and manage on their dashboard using your microsoft account.\r\n          </Card.Text>\r\n          <Card.Link href=\"https://azure.microsoft.com/en-us/\"  target=\"_blank\" >Check out Azure Services</Card.Link>\r\n        </Card.Body>\r\n      </Card>\r\n    </Container>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { Container, Card, Row, Col, Form, Button } from 'react-bootstrap';\r\nimport * as firebase from 'firebase';\r\n\r\nexport default class TeamBuilder extends React.Component \r\n{\r\n  _isMounted = false;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      allUsers: {},\r\n      teammates: {},\r\n      userName: \"\",\r\n      enteredEmail: \"\",\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n    if (firebase.auth().currentUser != null) {\r\n      this.updateState();\r\n    }\r\n  }\r\n\r\n  updateState = () => {\r\n    let userID = firebase.auth().currentUser.uid;\r\n    const databaseRef = firebase.database().ref();\r\n    databaseRef.once('value', snapshot => {\r\n      if (snapshot.exists() && this._isMounted) {\r\n        this.setState({ allUsers: snapshot.val().users });\r\n        //console.log(snapshot.val().users);\r\n        let usersObj = this.state.allUsers;\r\n        this.setState({ teammates: usersObj[userID].teammates });\r\n        this.setState({ userName: usersObj[userID].name });\r\n      }\r\n    })\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Look up user with this email, add to team members list\r\n    let currentUserID = firebase.auth().currentUser.uid;\r\n    firebase.database().ref(\"users\").once('value', snapshot => {\r\n      let userObj = snapshot.val();\r\n      let keys = Object.keys(userObj); // Array of user ids\r\n      keys.forEach(key => {\r\n        //console.log(userObj[key].email);\r\n        //console.log(userObj[key].roomNumber);\r\n        if (userObj[key].email === this.state.enteredEmail && userObj[key].roomNumber ==  null) {\r\n          this.addUserToTeam(key, userObj[currentUserID].roomNumber);\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  addUserToTeam = (teammateID, roomNum) => {\r\n    // Add user to room of project group\r\n    console.log(\"ran\");\r\n    let currentUserID = firebase.auth().currentUser.uid;\r\n    firebase.database().ref(\"users/\" + currentUserID + \"/teammates\").push(teammateID);\r\n    firebase.database().ref(\"rooms/\" + roomNum + \"/users\").push(teammateID);\r\n    firebase.database().ref(\"users/\" + teammateID + \"/teammates\").push(currentUserID);\r\n    firebase.database().ref(\"users/\" + teammateID).update({\r\n      \"roomNumber\": roomNum\r\n    })\r\n    // Rerender\r\n    this.updateState();\r\n    this.setState({ enteredEmail: '' });\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  }\r\n\r\n  handleCreateProjectClick = () => {\r\n    firebase.database().ref(\"rooms\").once('value', (snapshot) => {\r\n      if (!snapshot.exists()) {\r\n        this.createRoom(1);\r\n      }\r\n      else {\r\n        this.createRoom(Object.keys(snapshot.val()).length + 1);\r\n      }\r\n    });\r\n  }\r\n\r\n  createRoom = (num) => {\r\n    let uid = firebase.auth().currentUser.uid;\r\n    firebase.database().ref(\"rooms/\" + num.toString() + \"/users\").push(uid);\r\n    firebase.database().ref(\"users/\" + uid).update({\r\n      \"roomNumber\": num\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const teammatesList = (this.state.teammates != null) ? (\r\n      <div>\r\n        {Object.keys(this.state.teammates).map(key => { \r\n          return <Card.Text>{this.state.allUsers[this.state.allUsers[firebase.auth().currentUser.uid].teammates[key]].name}</Card.Text>\r\n        })}\r\n      </div>\r\n    ) : (<div></div>);\r\n\r\n    return (\r\n      <Container>\r\n        <h1 style={{ marginTop: 40, marginBottom: 30, }} >Team Building Page</h1>\r\n        <Row>\r\n          <Col>\r\n            <h3 >My Team</h3>\r\n            <Card class=\"card\">\r\n              <Card.Body class=\"body\">\r\n                <h4>{this.state.userName} (Me)</h4>\r\n              <Card.Text class=\"text\">\r\n                {teammatesList}\r\n              </Card.Text>\r\n            \r\n              </Card.Body>\r\n              \r\n            </Card>\r\n          </Col>\r\n          <Col>\r\n            <h3 >Add Team Members</h3>\r\n            <Card class=\"card\">\r\n              <Card.Body class=\"body\">\r\n                <Form onSubmit={this.handleSubmit} >\r\n                  <Form.Group controlId=\"formBasicEmail\">\r\n                    <h4>Search for Team Members</h4>\r\n                    <Card.Text class=\"text\">\r\n                      Enter your teammates email below and we will add them to your project group. In general, \r\n                      you may have up to 4 people in your project group, depending on the rules of the \r\n                      hackathon you are attending.\r\n                  \r\n                      Before adding teammates, one member must create a project group below. Then, any member \r\n                      can search to add additional members.\r\n                    </Card.Text>\r\n                    <Form.Control \r\n                      type=\"text\" \r\n                      id=\"enteredEmail\" \r\n                      placeholder=\"Enter team members' email\" \r\n                      onChange={this.handleChange}\r\n                      value={this.state.enteredEmail}\r\n                    />\r\n                  </Form.Group>\r\n                  <Button variant=\"light\" type=\"submit\">Add Member </Button>\r\n                </Form>\r\n                <h4> \r\n                </h4>\r\n                <Button variant=\"light\" onClick={this.handleCreateProjectClick} >Create Project Group</Button>{' '}\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Container, Card, Form, Button } from 'react-bootstrap';\r\nimport * as firebase from 'firebase';\r\n\r\n\r\nexport default class SignIn extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n    }\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    firebase.auth().signInWithEmailAndPassword(this.state.email, this.state.password)\r\n      .then(() => {\r\n        console.log(\"Successful Sign in\");\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error\");\r\n      })\r\n\r\n    this.props.history.push(\"/\");\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <Container>\r\n        <h1 className=\"mt-5 text-center\" >Welcome Back! Please Log In</h1>\r\n        <Card className=\"mt-5\" >\r\n          <Card.Body className=\"p-5\" >\r\n            <Form onSubmit={this.handleSubmit} >\r\n              <Form.Group controlId=\"email\">\r\n                <Form.Label>Email address</Form.Label>\r\n                <Form.Control type=\"email\" id=\"email\" placeholder=\"Enter email\" onChange={this.handleChange} />\r\n                <Form.Text className=\"text-muted\">\r\n                  We'll never share your email with anyone else.\r\n                </Form.Text>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"password\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control type=\"password\" id=\"password\" placeholder=\"Password\"  onChange={this.handleChange} />\r\n              </Form.Group>\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                Submit\r\n              </Button>\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Container, Card, Form, Button } from 'react-bootstrap';\r\nimport * as firebase from 'firebase';\r\n\r\n\r\nexport default class SignIn extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    }\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    firebase.auth().createUserWithEmailAndPassword(this.state.email, this.state.password)\r\n      .then(() => {\r\n        let user = firebase.auth().currentUser.uid;\r\n        const databaseRef = firebase.database().ref(\"users\").child(user);\r\n        databaseRef.set({\r\n          \"name\": this.state.firstName + \" \" + this.state.lastName,\r\n          \"teammates\": null,\r\n          \"room\": null,\r\n          \"email\": this.state.email,\r\n        });\r\n      })\r\n      .catch(() => {\r\n        console.log(\"Error\");\r\n      })\r\n    \r\n    this.props.history.push(\"/\");\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <Container>\r\n        <h1 className=\"mt-5 text-center\" >Welcome, Sign Up To Begin!</h1>\r\n        <Card className=\"mt-5\" >\r\n          <Card.Body className=\"p-5\" >\r\n            <Form onSubmit={this.handleSubmit} >\r\n            <Form.Group controlId=\"firstName\">\r\n                <Form.Label>First Name</Form.Label>\r\n                <Form.Control type=\"text\" id=\"firstName\" placeholder=\"Enter your first name\" onChange={this.handleChange} />\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"lastName\">\r\n                <Form.Label>Last Name</Form.Label>\r\n                <Form.Control type=\"text\" id=\"lastName\" placeholder=\"Enter your last name\" onChange={this.handleChange} />\r\n              </Form.Group>\r\n              \r\n              <Form.Group controlId=\"email\">\r\n                <Form.Label>Email address</Form.Label>\r\n                <Form.Control type=\"email\" id=\"email\" placeholder=\"Enter email\" onChange={this.handleChange} />\r\n                <Form.Text className=\"text-muted\">\r\n                  We'll never share your email with anyone else.\r\n                </Form.Text>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"password\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control type=\"password\" id=\"password\" placeholder=\"Password\"  onChange={this.handleChange} />\r\n              </Form.Group>\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                Signup\r\n              </Button>\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n","export default {\r\n  firebaseConfig: {\r\n    apiKey: \"AIzaSyCegc5JcuyTwu_pi92Zori_ivj-2BPEFB4\",\r\n    authDomain: \"hackhelper-cb7fe.firebaseapp.com\",\r\n    databaseURL: \"https://hackhelper-cb7fe.firebaseio.com\",\r\n    projectId: \"hackhelper-cb7fe\",\r\n    storageBucket: \"hackhelper-cb7fe.appspot.com\",\r\n    messagingSenderId: \"284511353607\",\r\n    appId: \"1:284511353607:web:10cfcaf3557f899982a3a2\",\r\n    measurementId: \"G-52E7MRM1VN\"\r\n  }\r\n}","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport NavbarSignedIn from './components/layout/NavbarSignedIn';\r\nimport NavbarSignedOut from './components/layout/NavbarSignedOut';\r\nimport Home from './components/tabs/Home';\r\nimport About from './components/tabs/About';\r\nimport Account from './components/tabs/Account';\r\nimport Assignments from './components/tabs/Assignments';\r\nimport BrainStorm from './components/tabs/BrainStorm';\r\nimport CurrentWork from './components/tabs/CurrentWork';\r\nimport ProjectDetails from './components/tabs/ProjectDetails';\r\nimport Resources from './components/tabs/Resources';\r\nimport TeamBuilder from './components/tabs/TeamBuilder';\r\nimport SignIn from './components/auth/SignIn';\r\nimport SignUp from './components/auth/SignUp';\r\nimport firebaseKey from './config/firebaseKey';\r\nimport * as firebase from 'firebase';\r\n\r\n\r\nclass App extends React.Component {\r\n  _isMounted = false;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isAuthenticated: false,\r\n    }\r\n    if (!firebase.apps.length){\r\n      firebase.initializeApp(firebaseKey.firebaseConfig);\r\n    }\r\n    firebase.auth().onAuthStateChanged(this.onAuthChange);\r\n  }\r\n\r\n  onAuthChange = (user) => {\r\n    if (this._isMounted){\r\n      this.setState({isAuthenticated: !!user});\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n\r\n  render() {\r\n    if (this.state.isAuthenticated){\r\n      // If logged in, show Main Tab Navigator\r\n      return (\r\n        <BrowserRouter>\r\n          <div className=\"App\" >\r\n            <NavbarSignedIn />\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Home} />\r\n              <Route exact path=\"/about\" component={About} />\r\n              <Route exact path=\"/account\" component={Account} />\r\n              <Route exact path=\"/assignments\" component={Assignments} />\r\n              <Route exact path=\"/brainstorm\" component={BrainStorm} />\r\n              <Route exact path=\"/currentwork\" component={CurrentWork} />\r\n              <Route exact path=\"/projectdetails\" component={ProjectDetails} />\r\n              <Route exact path=\"/resources\" component={Resources} />\r\n              <Route exact path=\"/teambuilder\" component={TeamBuilder} />\r\n              <Route exact path=\"/login\" component={SignIn} />\r\n              <Route exact path=\"/signup\" component={SignUp} />\r\n            </Switch>\r\n          </div>\r\n        </BrowserRouter>\r\n      );\r\n    } else {\r\n      return (\r\n        <BrowserRouter>\r\n          <div className=\"App\" >\r\n            <NavbarSignedOut />\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Home} />\r\n              <Route exact path=\"/about\" component={About} />\r\n              <Route exact path=\"/resources\" component={Resources} />\r\n              <Route exact path=\"/login\" component={SignIn} />\r\n              <Route exact path=\"/signup\" component={SignUp} />\r\n            </Switch>\r\n          </div>\r\n        </BrowserRouter>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n//import {getFirestore} from 'redux-firestore'\r\n//import {getFirebase} from 'react-redux-firebase'\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}